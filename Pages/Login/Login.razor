@page "/"
@using ImBlazorApp.Data
@inject IUserService userService
@layout LoginLayout

<div class="login-page">

    <div class="row">
        <div class="col col-xl-6 col-lg-6 d-none d-lg-block">
            <div class="login-logo">
                <img src="/img/logoBigWhite.png" width="70%" />
            </div>
        </div>

        <div class="col col-xl-6  col-lg-6 col-md-12 col-sm-12">
            <div class="login-container">
                <h4 class="form-group font-weight-bold">Welcome</h4>
                <br />
                <h6 class="form-group">Please Login</h6>
                 <br />

                <div class="form-group" style="">
                    <label for="username"> <i class="fa fa-user"></i>  Username</label>
                       <input type="text" class="form-control" @bind-value="username" id="username" placeholder="Enter Username" />
                </div>
                <div class="form-group" style="">
                    <label for="password">  <i class="fa fa-key"></i>   Password</label>
                    <input type="password" class="form-control" @bind="password" id="password" placeholder="Enter Password" />
                </div>

                <div class="form-group" style="">
                    <label class="text-danger"> @errorText </label>
                </div>

                <div class="form-group" style="">
                    <button @onclick="Login_click" class="btn btn-success btn-lg im-btn">Login </button>
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    [Inject]
    public NavigationManager navigationManager { get; set; }


    private string? username;
    private string? password;
    private string errorText = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string token = await localStorage.GetItemAsync<string>("token");

        if (token != null)
            navigationManager.NavigateTo("/Incidents");
    }

    private async Task Login_click()
    {
        var user = new UserLoginModel();
        user.Username = username;
        user.Password = password;        

        var request = new HttpRequestMessage(HttpMethod.Post,
          configuration.GetSection("APIURL").Value  + "/Users/authenticate");
        request.Content =new StringContent(JsonSerializer.Serialize(user), Encoding.UTF8, "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            var userLoginInfo = await JsonSerializer.DeserializeAsync<UserLogin>(responseStream);

            await localStorage.SetItemAsync("token", userLoginInfo.Token);

            var allUsers = await userService.GetAllUsers(userLoginInfo.Token);
            await localStorage.SetItemAsync("allUsers", allUsers);


            navigationManager.NavigateTo("/Incidents");
        }
        else
        {
            errorText = "Invalid username or password.";            
        }

        
    }




}
