<table class="table field-table table-borderless">
    <tr>
        <td>
            <span class="field-title">Assignee</span>           
        </td>
        <td>
            @*  <input type="text" class="line-textbox" value="Umar Shareef"/>*@
            <AssigneeDropdown></AssigneeDropdown>
        </td>
    </tr>
    <tr>
        <td>
            <span class="field-title">Status</span>           
        </td>
        <td>
            <select class="line-textbox" value="@status" @onchange="statusHasChanged" >
                <option value="N">New</option>
                <option value="I">In Progress</option>
                <option value="C">Closed</option>
                <option value="A">Approved</option>
            </select>
        </td>
    </tr>
    <tr>
        <td class="field-td">
            <span class="field-title">Start Time</span>            
             <i class="material-icons edit-btn" @onclick="startDateEditToggle" >edit</i>
         </td>
        <td>
            @if(!startDateEditable)
            {
                <span title="@startTime">@startTimeToDisplay</span>
            }
            else
            {
                <RadzenDatePicker ShowTime="true" @bind-Value="newStartDate" Change=@startDateChange />
                <button class="btn bg-success text-white">Update</button>
            }   
        </td>
    </tr>
    <tr>
        <td class="field-td">
            <span class="field-title">Due Date</span>
            <i class="material-icons edit-btn" @onclick="dueDateEditToggle">edit</i>
        </td>
        <td>
            @* @if(!dueDateEditable)
            {*@
                <span title="@dueDate" class='@(!dueDateEditable? "" : "d-none" )'>@dueDateToDisplay</span>
         @*   }
            else
            {*@
                <div class='@(!dueDateEditable? "d-none" : "" )'>
                    <RadzenDatePicker  ShowTime="true" @bind-Value="newDueDate" Change=@dueDateChange />
                    <button class="btn bg-success text-white">Update</button>
                </div>
           @* } *@  
        </td>
    </tr>
</table>



@code {

    /**/
    [Parameter]
    public string status { get; set; }
    [Parameter]
    public string assignee { get; set; }
    [Parameter]
    public DateTime startTime { get; set; } = DateTime.Now;
    [Parameter]
    public DateTime dueDate { get; set; } = DateTime.Now;

    private string startTimeToDisplay = "";
    private string dueDateToDisplay = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        startTimeToDisplay =  new(await JS.InvokeAsync<string>("getMoment", startTime));
        dueDateToDisplay =  new(await JS.InvokeAsync<string>("getMoment", dueDate));

        StateHasChanged();
    }

    private void statusHasChanged(ChangeEventArgs arg)
    {
        
    }

    private bool startDateEditable = false;
    private void startDateEditToggle()
    {
        startDateEditable = !startDateEditable;
    }

    private DateTime newStartDate = DateTime.Now;    

    void startDateChange(DateTime? value)
    {        
    }

    private bool dueDateEditable = false;
    private void dueDateEditToggle()
    {
        dueDateEditable = !dueDateEditable;
    }

    private DateTime newDueDate = DateTime.Now;    

    void dueDateChange(DateTime? value)
    {        
    }


}
