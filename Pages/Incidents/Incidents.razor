@page "/Incidents"
@using IM.Models

<div class="container px-8">
    <br />
    <div class="report-title">Incidents</div>
    <br />

    <input type="text" @bind="searchTxt"   class="line-textbox w-25" placeholder="Enter title or description and hit Search" />
    <input type="button"  value="Search" @onclick="SearchTextChanged" class="btn btn-outline-success" />
    <br />
    <br />

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th class="text-nowrap" scope="col">Title</th>
                <th class="text-nowrap" scope="col">Description</th>
                <th class="text-nowrap" scope="col">Assigned TO</th>
                <th class="text-nowrap" scope="col">Created By</th>
                <th class="text-nowrap" scope="col">Created Date</th>
                <th class="text-nowrap" scope="col">Due Date</th>
                <th class="text-nowrap" scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
                @if (incidents != null)
                {
                    @foreach (Incident incident in incidents)
                    {
                        <IncidentRow incident="@incident"></IncidentRow>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7"> <p class="loading-p"> Loading...</p></td>
                    </tr>

                }
        
        </tbody>

    </table>
</div>
    <Pagination pageNumber="@pageNumber" pageSize="@pageSize" totalRecords="@totalRecords" pageSizeOrNumberChanged="ReloadIncidents"></Pagination>

</div>

@code {

    //int PageSize, int PageNumber, string SortBy, string SortDirection, string Search;
    List<Incident> incidents;
    IncidentPages incidentPages;
    int totalRecords;
    int pageNumber = 1;
    int pageSize = 5;
    string searchTxt = "";

    protected override async Task OnInitializedAsync()
    {
      //  await JS.InvokeAsync("drawChart", new {name="Umar", age=40});
    
    }

    private async Task ReloadIncidents(dynamic pageInfo)
    {
        pageSize = pageInfo.pSize;
        pageNumber = pageInfo.pNumber;

        await GetIncidents(pageSize, pageNumber, searchTxt);
        StateHasChanged();
    }

    private async Task SearchTextChanged()
    {          
        await GetIncidents(pageSize, pageNumber, searchTxt);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           await GetIncidents(5, 1, "");
          
           
        }
    }

    private async Task GetIncidents(int pageSize, int pageNumber, string search)
    {
          string token = await localStorage.GetItemAsync<string>("token");
            var request = new HttpRequestMessage(HttpMethod.Get,
             configuration.GetSection("APIURL").Value + "/Incidents/GetIncidentsWithPage?PageSize=" + pageSize + "&PageNumber=" + pageNumber + "&SortBy=a&SortDirection=a&Search="+ search);

            request.Headers.Add("Authorization", "Bearer " + token);


            var client = ClientFactory.CreateClient();

            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                incidentPages = await JsonSerializer.DeserializeAsync<IncidentPages>(responseStream);
                incidents = incidentPages.Incidents;
                totalRecords = incidentPages.Total_Incidents;
                 StateHasChanged();
            }
            else
            {

            }
    }

     
}
